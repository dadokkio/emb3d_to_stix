import json
from itertools import combinations
from utils import clean, create_or_update_stix_obj, create_relationship
from stix2 import CourseOfAction, Vulnerability
from .property import Property


def inner_relationships(data, filepath):
    """Processes relationships between threats based on a JSON file.

    This function reads a JSON file to identify relationships between threats defined
    in the properties section. It creates "similar-to" relationships for pairs of threats
    that are associated with the same properties.

    Args:
        data (dict): The dict containing actual objects
        filepath (str): The path to the JSON file containing threat relationships.

    Returns:
        None: This function modifies the global `data` structure but does not return a value.
    """
    with open(filepath, "r") as f:
        json_data = json.loads(f.read())
    rels = [
        u
        for u in [
            [k["id"] for k in x.get("threats", [])] for x in json_data["properties"]
        ]
        if len(u) > 1
    ]
    for rel in rels:
        pairs = list(combinations(rel, 2))
        for start, end in pairs:
            start_obj = data["threats"][start].id
            end_obj = data["threats"][end].id
            data["relationships"].append(
                create_relationship(
                    start_obj,
                    end_obj,
                    "similar-to",
                )
            )


def process_threats(data, filename, keys_to_exclude=None):
    """Processes threat data from a JSON file.

    This function reads a JSON file containing threat data, creates or
    updates vulnerability and property objects, and establishes relationships
    between them. It also allows for the exclusion of specified keys during
    the processing of the data.

    Args:
        data (dict): A dictionary that holds existing threats, properties,
                     and relationships.
        filename (str): The path to the JSON file containing threat data.
        keys_to_exclude (set, optional): A set of keys to exclude from the
                                           processing. Defaults to None.

    Returns:
        None: This function updates the provided data dictionary in place
              but does not return any value.

    Raises:
        FileNotFoundError: If the specified JSON file does not exist.
        json.JSONDecodeError: If the file content is not valid JSON.

    Examples:
        process_threats(data_dict, "path/to/file.json")
    """
    if keys_to_exclude is None:
        keys_to_exclude = set()

    with open(filename) as f:
        json_obj = json.loads(f.read())["threats"]

        for obj in json_obj:

            # create main object
            stix_obj = create_or_update_stix_obj(
                obj,
                Vulnerability,
                data["threats"],
                keys_to_exclude,
                **clean(obj, keys_to_exclude)
            )
            data["threats"][stix_obj["name"]] = stix_obj

            # manage related items
            for rel_obj in obj.get("properties", []):
                stix_rel_obj = create_or_update_stix_obj(
                    rel_obj,
                    Property,
                    data["properties"],
                    keys_to_exclude,
                    **clean(rel_obj, keys_to_exclude)
                )
                data["relationships"].append(
                    create_relationship(stix_obj.id, stix_rel_obj.id, "has")
                )

            for rel_obj in obj.get("mitigations", []):
                stix_rel_obj = create_or_update_stix_obj(
                    rel_obj,
                    CourseOfAction,
                    data["mitigations"],
                    keys_to_exclude,
                    **clean(rel_obj, keys_to_exclude)
                )
                data["relationships"].append(
                    create_relationship(stix_rel_obj.id, stix_obj.id, "mitigates")
                )
